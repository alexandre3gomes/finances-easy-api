package net.finance.entity;
// Generated 02/05/2018 18:17:54 by Hibernate Tools 5.2.8.Final

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Developers generated by hbm2java
 */
@Entity
@Table(name = "app_users")
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode
public class User implements Serializable, UserDetails {

	/**
	 *
	 */
	private static final long serialVersionUID = -6578425493164749786L;
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false, precision = 3, scale = 0)
	private Integer id;
	@Column(name = "name", nullable = false, length = 40)
	private String name;
	@Column(name = "username", nullable = true, length = 50)
	private String username;
	@Column(name = "password", nullable = true, length = 100)
	private String password;
	@Transient
	private String token;
	@OneToMany(mappedBy = "user")
	@JsonIgnore
	@Transient
	private final List<Budget> budgets = new ArrayList<>();
	@OneToMany(mappedBy = "user")
	@JsonIgnore
	@Transient
	private final List<Expense> expensies = new ArrayList<>();
	@OneToMany(mappedBy = "user")
	@JsonIgnore
	@Transient
	private final List<Income> incomes = new ArrayList<>();

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return new ArrayList<>();
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
}
